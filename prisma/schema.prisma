// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(50)
  username  String   @unique @db.VarChar(50)
  fullname  String   @db.VarChar(50)
  phone     String?  @db.VarChar(20)
  password  String   @db.VarChar(100)
  balance   Int      @default(0)
  isAdmin   Boolean  @default(false)
  isActive  Boolean  @default(false)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshToken RefreshToken[]
  otp          Otp?

  @@map("users")
}

// model Profile {
//   id        Int      @id @default(autoincrement())
//   username  String   @db.VarChar(50)
//   fullname  String   @db.VarChar(50)
//   phone     String?  @db.VarChar(20)
//   balance   Int      @default(0)
//   isAdmin   Boolean  @default(false)
//   isActive  Boolean  @default(false)
//   createdAt DateTime @default(now())
// }

model RefreshToken {
  token     String   @id @db.VarChar(300)
  userId    Int
  createdAt DateTime @default(now())
  expiresIn DateTime
  userAgent String   @db.VarChar(200)
  isActive  Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Otp {
  otp       String   @id @db.VarChar(10)
  userId    Int      @unique
  createdAt DateTime @default(now())
  expiresIn DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otps")
}

model CsrfToken {
  token     String   @id @db.VarChar(100)
  createdAt DateTime @default(now())
  expiresIn DateTime

  @@map("csrf_tokens")
}
